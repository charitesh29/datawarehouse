--FINAL TRANSFORMATION AND LOADING DATA INTO SILVER LAYER

--INSERTING DATA INTO CRM_CUST_INFO (SILVER LAYER)

INSERT INTO
    DATA_WAREHOUSE.SILVER.CRM_CUST_INFO (
        CST_ID,
        CST_KEY,
        CST_FIRSTNAME,
        CST_LASTNAME,
        CST_MARITAL_STATUS,
        CST_GNDR,
        CST_CREATE_DATE
    )
SELECT
    CST_ID,
    CST_KEY,
    TRIM(CST_FIRSTNAME) AS CST_FIRSTNAME,
    --FIXING THE EXTRA SPACE ISSUE
    TRIM(CST_LASTNAME) AS CST_LASTNAME,
    --FIXING THE EXTRA SPACE ISSUE
    CASE
        WHEN UPPER(TRIM(CST_MARITAL_STATUS)) = 'M' THEN 'MARRIED'
        WHEN UPPER(TRIM(CST_MARITAL_STATUS)) = 'S' THEN 'SINGLE'
        ELSE 'N/A'
    END AS CST_MARITAL_STATUS,
    ----NORMALIZING THE COLUMN IN READABLE FORMAT
    CASE
        WHEN UPPER(TRIM(CST_GNDR)) = 'M' THEN 'MALE'
        WHEN UPPER(TRIM(CST_GNDR)) = 'F' THEN 'FEMALE'
        ELSE 'N/A'
    END AS CST_GNDR,
    ----NORMALIZING THE COLUMN IN READABLE FORMAT
    CST_CREATE_DATE,
FROM
    DATA_WAREHOUSE.BRONZE.CRM_CUST_INFO QUALIFY ROW_NUMBER() OVER(
        PARTITION BY CST_ID
        ORDER BY
            CST_CREATE_DATE DESC
    ) = 1
    AND CST_ID IS NOT NULL;

-----------------------------------------------------------------------------------------------------------------------------------------

--INSERTING DATA INTO CRM_PRD_INFO (SILVER LAYER)
    
INSERT INTO
    DATA_WAREHOUSE.SILVER.CRM_PRD_INFO (
        PRD_ID,
        CAT_ID,
        PRD_KEY,
        PRD_NM,
        PRD_COST,
        PRD_LINE,
        PRD_START_DT,
        PRD_END_DT
    )
SELECT
    PRD_ID,
    REPLACE(SUBSTR(PRD_KEY, 1, 5), '-', '_') AS CAT_ID,
    --EXTRACTING CAT_ID IN ORDER TO JOIN WITH ERP TABLE CAT
    SUBSTR(PRD_KEY, 7, LENGTH(PRD_KEY)) AS PRD_KEY,
    --EXTRACTING PRD_KEY IN ORDER TO JOIN WITH SALES_DETAILS
    PRD_NM,
    IFNULL(PRD_COST, 0) AS PRD_COST,
    --REPLACING 0 IF THE PRD_COST IS NULL
    CASE
        UPPER(TRIM(PRD_LINE))
        WHEN 'M' THEN 'MOUNTAIN'
        WHEN 'R' THEN 'ROAD'
        WHEN 'S' THEN 'OTHER SALES'
        WHEN 'T' THEN 'TOURING'
        ELSE 'N/A'
    END AS PRD_LINE,
    --NORMALIZING THE COLUMN IN READABLE FORMAT
    PRD_START_DT,
    LEAD(PRD_START_DT) OVER(
        PARTITION BY PRD_KEY
        ORDER BY
            PRD_START_DT
    ) -1 AS PRD_END_DT --FIXING THE END DATE WHICH WAS AN INITIALLY (END DATE IS LESS THAN START DATE)
FROM
    DATA_WAREHOUSE.BRONZE.CRM_PRD_INFO;

-----------------------------------------------------------------------------------------------------------------------------------------

--INSERTING DATA INTO CRM_SALES_DETAILS (SILVER LAYER)
    
INSERT INTO
    DATA_WAREHOUSE.SILVER.CRM_SALES_DETAILS (
        SLS_ORD_NUM,
        SLS_PRD_KEY,
        SLS_CUST_ID,
        SLS_ORDER_DT,
        SLS_SHIP_DT,
        SLS_DUE_DT,
        SLS_SALES,
        SLS_QUANTITY,
        SLS_PRICE
    )
SELECT
    SLS_ORD_NUM,
    SLS_PRD_KEY,
    SLS_CUST_ID,
    CASE
        WHEN SLS_ORDER_DT <= 0
        OR LENGTH(SLS_ORDER_DT) <> 8 THEN NULL
        ELSE (SLS_ORDER_DT::VARCHAR)::DATE
    END AS SLS_ORDER_DT,
    --VALIDATING DATE COLUMN IS NON NEGATIVE OR LENGTH NOT LESS THAN 8 CHAR THEN REPLACING IT WITH NULL
    CASE
        WHEN SLS_SHIP_DT <= 0
        OR LENGTH(SLS_SHIP_DT) <> 8 THEN NULL
        ELSE (SLS_SHIP_DT::VARCHAR)::DATE
    END AS SLS_SHIP_DT,
    --VALIDATING DATE COLUMN IS NON NEGATIVE OR LENGTH NOT LESS THAN 8 CHAR THEN REPLACING IT WITH NULL
    CASE
        WHEN SLS_DUE_DT <= 0
        OR LENGTH(SLS_DUE_DT) <> 8 THEN NULL
        ELSE (SLS_DUE_DT::VARCHAR)::DATE
    END AS SLS_DUE_DT,
    --VALIDATING DATE COLUMN IS NON NEGATIVE OR LENGTH NOT LESS THAN 8 CHAR THEN REPLACING IT WITH NULL
    CASE
        WHEN SLS_SALES IS NULL
        OR SLS_SALES <= 0
        OR SLS_SALES <>(SLS_QUANTITY * ABS(SLS_PRICE)) THEN (SLS_QUANTITY * ABS(SLS_PRICE))
        ELSE SLS_SALES
    END AS SLS_SALES,
    --VALIDATING THE SALES COLUMN IF THE SALES IS NEGATIVE OR VIOLATING RULE(QUANTITY*PRICE) THEN FIXING IT WITH RULE(QUANTITY*PRICE)
    SLS_QUANTITY,
    CASE
        WHEN SLS_PRICE IS NULL
        OR SLS_PRICE <= 0 THEN SLS_SALES / NULLIF(SLS_QUANTITY, 0)
        ELSE SLS_PRICE
    END AS SLS_PRICE,
    --VALIDATING PRICE COLUMN IF THE PRICE IS NEGATIVE OR NULL DERIVING THE PRICE WITH (SALES OF THE PRODUCT/QUANTITY SOLD)
FROM
    DATA_WAREHOUSE.BRONZE.CRM_SALES_DETAILS;

-----------------------------------------------------------------------------------------------------------------------------------------

--INSERTING DATA INTO ERP_CUST_AZ12 (SILVER LAYER)

INSERT INTO DATA_WAREHOUSE.SILVER.ERP_CUST_AZ12
(CID,BDATE,GEN)
SELECT
CASE
    WHEN CID LIKE 'NAS%' 
    THEN SUBSTR(CID,4,LENGTH(CID))
    ELSE CID
END AS CID,--IN ORDER TO JOIN WITH  CRM_CUST_INFO.CST_KEY THE BAD DATA APPENDED WITH NAS% IS REMOVED
CASE 
    WHEN BDATE>CURRENT_DATE THEN NULL
    ELSE BDATE
END AS BDATE,--VALIDATING AND FIXING THE BDATE WHCH IS GREATER THAN CURRENT DATE 
CASE 
    WHEN UPPER(GEN)='M' THEN 'Male'
    WHEN UPPER(GEN)='F' THEN 'Female'
    WHEN GEN IS NULL THEN 'N/A'
    WHEN GEN<>TRIM(GEN) THEN 'N/A'
    ELSE GEN
END AS GEN -- NORMALIZING THE GEN COLUMN IN TO COMMON READABLE FORMAT
FROM DATA_WAREHOUSE.BRONZE.ERP_CUST_AZ12;


-----------------------------------------------------------------------------------------------------------------------------------------

--INSERTING DATA INTO ERP_LOC_A101 (SILVER LAYER)

INSERT INTO DATA_WAREHOUSE.SILVER.ERP_LOC_A101
(CID,CNTRY)
SELECT
REPLACE(CID,'-','') AS CID,--REPLACING THE '-' SYMBOL IN CID COLUMN , SO IT CAN BE JOINED WITH CRM_CUST_INFO.CST_KEY TABLE  
CASE 
    WHEN UPPER(TRIM(CNTRY)) IN('USA','US') THEN 'UNITED STATES'
    WHEN UPPER(TRIM(CNTRY)) IN('DE') THEN 'GERMANY'
    WHEN CNTRY<>TRIM(CNTRY) OR CNTRY IS NULL THEN 'N/A'
    ELSE UPPER(CNTRY)
END AS CNTRY --NORMALIZING THE COLUMN INTO READABLE FORMAT
FROM DATA_WAREHOUSE.BRONZE.ERP_LOC_A101;


-----------------------------------------------------------------------------------------------------------------------------------------

--INSERTING DATA INTO ERP_PX_CAT_G1V2 (SILVER LAYER)

INSERT INTO DATA_WAREHOUSE.SILVER.ERP_PX_CAT_G1V2
(ID,CAT,SUBCAT,MAINTENANCE)
SELECT
ID,
CAT,
SUBCAT,
MAINTENANCE
FROM DATA_WAREHOUSE.BRONZE.ERP_PX_CAT_G1V2;